package ru.yarsu.web.domain.models.telegram.service

import com.fasterxml.jackson.module.kotlin.jacksonObjectMapper
import ru.yarsu.config.AppConfig
import java.net.URI
import java.net.http.HttpClient
import java.net.http.HttpRequest
import java.net.http.HttpResponse

object TelegramService {
    private val appConfig = AppConfig()
    private val BOT_TOKEN = appConfig.telegramConfig.botToken
    private val client = HttpClient.newHttpClient()
    private val mapper = jacksonObjectMapper()

    private fun send(
        chatId: Long,
        text: String,
    ) {
        if (chatId <= 0L) return

        val url = "https://api.telegram.org/bot$BOT_TOKEN/sendMessage"
        val payload = mapOf("chat_id" to chatId, "text" to text)

        val request =
            HttpRequest
                .newBuilder()
                .uri(URI.create(url))
                .header("Content-Type", "application/json")
                .POST(HttpRequest.BodyPublishers.ofString(mapper.writeValueAsString(payload)))
                .build()

        client.send(request, HttpResponse.BodyHandlers.ofString())
    }

    fun notifyTeacherSuccess(chatId: Long) {
        val text = "üéâ –í–∞—à–∞ –∑–∞—è–≤–∫–∞ –Ω–∞ —Ä–æ–ª—å –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è –æ–¥–æ–±—Ä–µ–Ω–∞! –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –∫–æ–º–∞–Ω–¥—É!"
        send(chatId, text)
    }

    fun notifyTeacherRejected(chatId: Long) {
        val text = "üö´ –ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –≤–∞—à–∞ –∑–∞—è–≤–∫–∞ –Ω–∞ —Ä–æ–ª—å –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è –±—ã–ª–∞ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∞. –í—ã –º–æ–∂–µ—Ç–µ –ø–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å —Å–Ω–æ–≤–∞ –ø–æ–∑–∂–µ."
        send(chatId, text)
    }

    fun teacherNotification(teacherId: Long, studentId: Long) {
        if (teacherId <= 0L) return

        val text = if (studentId > 0L) {
            "–ó–∞–ø–∏—Å—å –Ω–∞ –∑–∞–Ω—è—Ç–∏–µ. –£—á–µ–Ω–∏–∫: $studentId"
        } else {
            "–ó–∞–ø–∏—Å—å –Ω–∞ –∑–∞–Ω—è—Ç–∏–µ. –£—á–µ–Ω–∏–∫ –Ω–µ —É–∫–∞–∑–∞–Ω."
        }
        send(teacherId, text)
    }

    fun studentNotification(teacherId: Long, studentId: Long) {
        if (studentId <= 0L) return

        val text = if (teacherId > 0L) {
            "–ó–∞–ø–∏—Å—å –Ω–∞ –∑–∞–Ω—è—Ç–∏–µ. –£—á–∏—Ç–µ–ª—å: $teacherId"
        } else {
            "–ó–∞–ø–∏—Å—å –Ω–∞ –∑–∞–Ω—è—Ç–∏–µ. –£—á–∏—Ç–µ–ª—å –Ω–µ —É–∫–∞–∑–∞–Ω."
        }
        send(studentId, text)
    }

    fun spotOwnerNotification(ownerIds: List<Long>, spotId: Long, studentId: Long) {
        if (ownerIds.isEmpty()) return

        val text = if (studentId > 0L) {
            "–ó–∞–ø–∏—Å—å –Ω–∞ —Ä–µ–ø–µ—Ç–∏—Ü–∏–æ–Ω–Ω—É—é —Ç–æ—á–∫—É ‚Ññ$spotId. –£—á–µ–Ω–∏–∫: $studentId"
        } else {
            "–ó–∞–ø–∏—Å—å –Ω–∞ —Ä–µ–ø–µ—Ç–∏—Ü–∏–æ–Ω–Ω—É—é —Ç–æ—á–∫—É ‚Ññ$spotId. –£—á–µ–Ω–∏–∫ –Ω–µ —É–∫–∞–∑–∞–Ω."
        }

        ownerIds.forEach { ownerId ->
            if (ownerId > 0L) {
                send(ownerId, text)
            }
        }
    }

    fun studentSpotNotification(ownerIds: List<Long>, spotId: Long, studentId: Long) {
        if (studentId <= 0L) return

        val validOwners = ownerIds.filter { it > 0L }
        val text = if (validOwners.isNotEmpty()) {
            "–ó–∞–ø–∏—Å—å –Ω–∞ —Ä–µ–ø–µ—Ç–∏—Ü–∏–æ–Ω–Ω—É—é —Ç–æ—á–∫—É ‚Ññ$spotId. –í–ª–∞–¥–µ–ª–µ—Ü(–∏): ${validOwners.joinToString(", ")}"
        } else {
            "–ó–∞–ø–∏—Å—å –Ω–∞ —Ä–µ–ø–µ—Ç–∏—Ü–∏–æ–Ω–Ω—É—é —Ç–æ—á–∫—É ‚Ññ$spotId. –í–ª–∞–¥–µ–ª–µ—Ü –Ω–µ —É–∫–∞–∑–∞–Ω."
        }

        send(studentId, text)
    }


}
